{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Invoice Ninja Application Documentation","text":"<p>This documentation provides comprehensive information about the containerized Invoice Ninja application deployment maintained by webgrip.</p>","tags":["invoice-ninja","documentation","overview","getting-started"],"boost":5},{"location":"#purpose-statement","title":"Purpose Statement","text":"<p>This documentation enables any engineer to understand what we built, why we built it this way, how to operate it safely, and how to evolve it\u2014without leaving the repository.</p>","tags":["invoice-ninja","documentation","overview","getting-started"],"boost":5},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Project Overview - What this project is and which upstream applications it packages</li> <li>Upstream Application - Facts about Invoice Ninja derived from official sources</li> <li>Configuration - Environment variables, volumes, and service settings</li> <li>Deployment - How to deploy and manage the application</li> <li>Operations - Day-to-day operational procedures</li> <li>Troubleshooting - Common issues and solutions</li> <li>Development - Development workflow and customization</li> </ul>","tags":["invoice-ninja","documentation","overview","getting-started"],"boost":5},{"location":"#quick-start","title":"Quick Start","text":"<ol> <li>Clone this repository</li> <li>Copy <code>.env.example</code> to <code>.env</code> and configure database credentials</li> <li>Run <code>make start</code> to start the application stack</li> <li>Access Invoice Ninja at <code>http://localhost:8080</code></li> </ol> <p>For detailed instructions, see the Deployment Guide.</p>","tags":["invoice-ninja","documentation","overview","getting-started"],"boost":5},{"location":"#image-policy","title":"Image Policy","text":"<p>This repository builds and maintains organization-owned container images based on official upstream sources. Our Docker Compose configuration uses only our custom-built images to ensure consistency and security.</p>","tags":["invoice-ninja","documentation","overview","getting-started"],"boost":5},{"location":"configuration/","title":"Configuration","text":"<p>Please see the Configuration section for detailed configuration information.</p>","tags":["configuration","overview"],"boost":4},{"location":"deployment/","title":"Deployment","text":"<p>Please see the Deployment section for detailed deployment information.</p>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Prerequisites</li> <li>Initial Setup</li> <li>Deployment Procedures</li> <li>Upgrade Procedures</li> <li>Rollback Procedures</li> <li>Production Considerations</li> </ul>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#prerequisites","title":"Prerequisites","text":"","tags":["deployment","overview"],"boost":4},{"location":"deployment/#system-requirements","title":"System Requirements","text":"<ul> <li>Docker Engine: 20.10+ with Docker Compose V2</li> <li>Operating System: Linux (Ubuntu 20.04+, RHEL 8+, or equivalent)</li> <li>Memory: 4GB RAM minimum (8GB recommended for production)</li> <li>Storage: 20GB available space (SSD recommended)</li> <li>Network: Outbound internet access for image pulls and updates</li> </ul>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#required-tools","title":"Required Tools","text":"<p>Install the following tools on the deployment host:</p> <pre><code># Docker and Docker Compose\ncurl -fsSL https://get.docker.com | sh\nsudo usermod -aG docker $USER\n\n# Make (usually pre-installed)\nsudo apt-get update &amp;&amp; sudo apt-get install -y make\n\n# Age for secret encryption (optional)\nsudo apt-get install -y age\n\n# SOPS for secret management (optional)\ncurl -LO https://github.com/mozilla/sops/releases/download/v3.8.1/sops-v3.8.1.linux.amd64\nsudo mv sops-v3.8.1.linux.amd64 /usr/local/bin/sops\nsudo chmod +x /usr/local/bin/sops\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#network-setup","title":"Network Setup","text":"<p>Ensure the following ports are available:</p> <ul> <li>8080/tcp - Application web interface</li> <li>5432/tcp - PostgreSQL (development only)</li> <li>3306/tcp - MariaDB (development only, if used)</li> </ul>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#initial-setup","title":"Initial Setup","text":"","tags":["deployment","overview"],"boost":4},{"location":"deployment/#1-repository-clone-and-configuration","title":"1. Repository Clone and Configuration","text":"<pre><code># Clone the repository\ngit clone https://github.com/webgrip/invoiceninja-application.git\ncd invoiceninja-application\n\n# Copy and configure environment\ncp .env.example .env\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#2-environment-configuration","title":"2. Environment Configuration","text":"<p>Edit <code>.env</code> file with your specific settings:</p> <pre><code># Required: Set strong database credentials\nDB_DATABASE=invoiceninja\nDB_USERNAME=invoiceninja_user\nDB_PASSWORD=&lt;generate-strong-password&gt;\nDB_ROOT_PASSWORD=&lt;generate-strong-root-password&gt;\n\n# Required: Set your domain\nSUBDOMAIN=invoiceninja\nDOMAIN_NAME=yourcompany.com\nBASE_URL=https://invoiceninja.yourcompany.com\n\n# Required: Application key (will be generated)\nAPP_KEY=\n\n# Recommended: Mail configuration\nMAIL_MAILER=smtp\nMAIL_HOST=your-smtp-server.com\nMAIL_PORT=587\nMAIL_USERNAME=your-email@yourcompany.com\nMAIL_PASSWORD=your-email-password\nMAIL_ENCRYPTION=tls\nMAIL_FROM_ADDRESS=noreply@yourcompany.com\nMAIL_FROM_NAME=\"Your Company Invoices\"\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#3-secret-management-production","title":"3. Secret Management (Production)","text":"<p>For production deployments, use encrypted secrets:</p> <pre><code># Initialize age encryption\nmake secrets:init\n\n# Add your secrets to the decrypted file\nnano ops/secrets/invoiceninja-application-secrets/values.dec.yaml\n\n# Encrypt the secrets\nmake secrets:encrypt SECRETS_DIR=./ops/secrets/invoiceninja-application-secrets\n\n# Add the age key to your deployment environment\nexport SOPS_AGE_KEY=$(cat .age.key)\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#4-network-setup","title":"4. Network Setup","text":"<p>Create the required Docker network:</p> <pre><code># Create external network\ndocker network create webgrip\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#deployment-procedures","title":"Deployment Procedures","text":"","tags":["deployment","overview"],"boost":4},{"location":"deployment/#quick-start-deployment","title":"Quick Start Deployment","text":"<p>For development or testing environments:</p> <pre><code># Start all services\nmake start\n\n# Verify services are healthy\ndocker-compose ps\n\n# Follow logs\nmake logs\n\n# Access the application\n# Navigate to http://localhost:8080\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#production-deployment","title":"Production Deployment","text":"<ol> <li>Pre-deployment Verification</li> </ol> <pre><code># Verify configuration\ndocker-compose config\n\n# Check image availability\ndocker-compose pull --ignore-pull-failures\n\n# Verify external network exists\ndocker network inspect webgrip\n</code></pre> <ol> <li>Database Initialization</li> </ol> <pre><code># Start database first\ndocker-compose up -d invoiceninja-application.mariadb\n\n# Wait for database to be ready\nmake wait-ready URL=http://localhost:3306\n\n# Verify database connectivity\ndocker-compose exec invoiceninja-application.mariadb mariadb \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  --execute=\"SELECT 1\"\n</code></pre> <ol> <li>Application Deployment</li> </ol> <pre><code># Start all services\nmake start\n\n# Monitor startup\nmake logs SERVICE=invoiceninja-application.application\n\n# Wait for application readiness\nmake wait-ready URL=http://localhost:8080/health\n</code></pre> <ol> <li>Initial Configuration</li> </ol> <pre><code># Create admin user (customize command for Invoice Ninja)\nmake user:create EMAIL=admin@yourcompany.com PASS=initial-password\n\n# Access the application and complete setup wizard\n# Navigate to http://localhost:8080/setup\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#service-management","title":"Service Management","text":"<pre><code># Start services\nmake start\n\n# Stop services\nmake stop\n\n# View logs (all services)\nmake logs\n\n# View logs (specific service)\nmake logs SERVICE=invoiceninja-application.application\n\n# Execute commands in application container\nmake enter\n# Or with specific command\nmake run CMD=\"php artisan migrate:status\"\n\n# Health check\ncurl -f http://localhost:8080/health\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#upgrade-procedures","title":"Upgrade Procedures","text":"","tags":["deployment","overview"],"boost":4},{"location":"deployment/#pre-upgrade-checklist","title":"Pre-upgrade Checklist","text":"<ul> <li> Database backup completed</li> <li> Application volume backup completed</li> <li> Maintenance window scheduled</li> <li> Rollback plan tested</li> <li> New image tags verified</li> </ul>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#backup-procedure","title":"Backup Procedure","text":"<pre><code># Create backup directory\nmkdir -p backups/$(date +%Y%m%d_%H%M%S)\n\n# Backup database\ndocker-compose exec invoiceninja-application.mariadb mariadb-dump \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  invoiceninja &gt; backups/$(date +%Y%m%d_%H%M%S)/database.sql\n\n# Backup application data volume\ndocker run --rm -v invoiceninja-application-application-data:/data \\\n  -v $(pwd)/backups/$(date +%Y%m%d_%H%M%S):/backup \\\n  busybox tar czf /backup/application-data.tar.gz -C /data .\n\n# Backup configuration\ncp .env backups/$(date +%Y%m%d_%H%M%S)/env.backup\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#upgrade-process","title":"Upgrade Process","text":"<ol> <li>Update Image Tags</li> </ol> <pre><code># Edit docker-compose.yml to update image tags\nsed -i 's/:latest/:v5.8.0/g' docker-compose.yml\n\n# Or for specific service\nsed -i 's/webgrip\\/invoiceninja-application\\.application:latest/webgrip\\/invoiceninja-application\\.application:v5.8.0/' docker-compose.yml\n</code></pre> <ol> <li>Pull New Images</li> </ol> <pre><code># Pull updated images\ndocker-compose pull\n\n# Verify image updates\ndocker images | grep webgrip/invoiceninja-application\n</code></pre> <ol> <li>Deploy Update</li> </ol> <pre><code># Stop current services\nmake stop\n\n# Start with new images\nmake start\n\n# Monitor deployment\nmake logs\n\n# Wait for readiness\nmake wait-ready URL=http://localhost:8080/health\n</code></pre> <ol> <li>Post-upgrade Verification</li> </ol> <pre><code># Verify application functionality\ncurl -f http://localhost:8080/health\n\n# Check database migrations\nmake run CMD=\"php artisan migrate:status\"\n\n# Verify user authentication\n# Login to web interface and perform key functions\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#rollback-procedures","title":"Rollback Procedures","text":"","tags":["deployment","overview"],"boost":4},{"location":"deployment/#automatic-rollback","title":"Automatic Rollback","text":"<p>If health checks fail during upgrade:</p> <pre><code># Stop failed deployment\nmake stop\n\n# Restore previous image tags\ngit checkout HEAD~1 -- docker-compose.yml\n\n# Restart with previous images\nmake start\n\n# Verify rollback success\nmake wait-ready URL=http://localhost:8080/health\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#manual-rollback-with-data-restore","title":"Manual Rollback with Data Restore","text":"<p>If data corruption occurs:</p> <ol> <li>Stop All Services</li> </ol> <pre><code>make stop\n</code></pre> <ol> <li>Restore Database</li> </ol> <pre><code># Remove corrupted data\ndocker volume rm invoiceninja-application-mariadb-data\n\n# Recreate volume\ndocker volume create invoiceninja-application-mariadb-data\n\n# Start database service\ndocker-compose up -d invoiceninja-application.mariadb\n\n# Wait for database ready\nsleep 30\n\n# Restore from backup\ncat backups/20250109_140000/database.sql | \\\n  docker-compose exec -T invoiceninja-application.mariadb \\\n  mariadb --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja invoiceninja\n</code></pre> <ol> <li>Restore Application Data</li> </ol> <pre><code># Remove corrupted application data\ndocker volume rm invoiceninja-application-application-data\n\n# Recreate volume\ndocker volume create invoiceninja-application-application-data\n\n# Restore from backup\ndocker run --rm -v invoiceninja-application-application-data:/data \\\n  -v $(pwd)/backups/20250109_140000:/backup \\\n  busybox tar xzf /backup/application-data.tar.gz -C /data\n</code></pre> <ol> <li>Restart Services</li> </ol> <pre><code># Start all services\nmake start\n\n# Verify restoration\nmake wait-ready URL=http://localhost:8080/health\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#production-considerations","title":"Production Considerations","text":"","tags":["deployment","overview"],"boost":4},{"location":"deployment/#resource-allocation","title":"Resource Allocation","text":"<p>Adjust resource limits in docker-compose.yml for production:</p> <pre><code>services:\n  invoiceninja-application.application:\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n          memory: 2G\n        reservations:\n          cpus: '1.0'\n          memory: 1G\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#security-hardening","title":"Security Hardening","text":"<ol> <li>Network Security</li> </ol> <pre><code># Create dedicated network for production\ndocker network create --driver bridge \\\n  --subnet=172.20.0.0/16 \\\n  --ip-range=172.20.240.0/20 \\\n  invoiceninja-prod\n\n# Update docker-compose.yml to use dedicated network\n</code></pre> <ol> <li>Container Security</li> </ol> <pre><code># Add security options to containers\nsecurity_opt:\n  - no-new-privileges:true\n  - seccomp:unconfined\nread_only: true  # Where applicable\nuser: \"1001:1001\"  # Non-root user\n</code></pre> <ol> <li>Secret Management</li> </ol> <pre><code># Use Docker secrets in production\necho \"database_password\" | docker secret create db_password -\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#monitoring-and-alerting","title":"Monitoring and Alerting","text":"<ol> <li>Health Monitoring</li> </ol> <pre><code># Set up health check monitoring\n*/5 * * * * curl -f http://localhost:8080/health || echo \"Invoice Ninja health check failed\" | mail -s \"Alert\" admin@yourcompany.com\n</code></pre> <ol> <li>Log Management</li> </ol> <pre><code># Configure centralized logging\nlogging:\n  driver: \"json-file\"\n  options:\n    max-size: \"10m\"\n    max-file: \"3\"\n    labels: \"service=invoiceninja\"\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#backup-strategy","title":"Backup Strategy","text":"<ol> <li>Automated Backups</li> </ol> <pre><code># Create backup script\ncat &gt; backup.sh &lt;&lt; 'EOF'\n#!/bin/bash\nBACKUP_DIR=\"backups/$(date +%Y%m%d_%H%M%S)\"\nmkdir -p \"$BACKUP_DIR\"\n\n# Database backup\ndocker-compose exec invoiceninja-application.mariadb mariadb-dump \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  invoiceninja &gt; \"$BACKUP_DIR/database.sql\"\n\n# Application data backup\ndocker run --rm -v invoiceninja-application-application-data:/data \\\n  -v $(pwd)/$BACKUP_DIR:/backup busybox \\\n  tar czf /backup/application-data.tar.gz -C /data .\n\n# Clean old backups (keep 30 days)\nfind backups/ -type d -mtime +30 -exec rm -rf {} \\;\nEOF\n\nchmod +x backup.sh\n\n# Schedule via cron\necho \"0 2 * * * /path/to/invoiceninja-application/backup.sh\" | crontab -\n</code></pre> <ol> <li>Offsite Backup</li> </ol> <pre><code># Upload to cloud storage (example with AWS S3)\naws s3 sync backups/ s3://your-backup-bucket/invoiceninja-backups/\n</code></pre>","tags":["deployment","overview"],"boost":4},{"location":"deployment/#sources","title":"Sources","text":"<p>Deployment procedures are based on Docker Compose best practices and Invoice Ninja installation guidelines:</p> <ul> <li>Docker Compose Production Guide, https://docs.docker.com/compose/production/, Retrieved 2025-01-09</li> <li>Invoice Ninja Installation Documentation, https://invoiceninja.github.io/en/self-host-installation/, Retrieved 2025-01-09</li> <li>Laravel Deployment Best Practices, https://laravel.com/docs/10.x/deployment, Retrieved 2025-01-09</li> </ul>","tags":["deployment","overview"],"boost":4},{"location":"development/","title":"Macro Rendering Error","text":"<p>File: <code>development.md</code></p> <p>UndefinedError: 'github' is undefined</p> <pre><code>Traceback (most recent call last):\n  File \"/usr/local/lib/python3.13/site-packages/mkdocs_macros/plugin.py\", line 688, in render\n    return md_template.render(**page_variables)\n           ~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^\n  File \"/usr/local/lib/python3.13/site-packages/jinja2/environment.py\", line 1295, in render\n    self.environment.handle_exception()\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"/usr/local/lib/python3.13/site-packages/jinja2/environment.py\", line 942, in handle_exception\n    raise rewrite_traceback_stack(source=source)\n  File \"&lt;template&gt;\", line 543, in top-level template code\n  File \"/usr/local/lib/python3.13/site-packages/jinja2/environment.py\", line 490, in getattr\n    return getattr(obj, attribute)\njinja2.exceptions.UndefinedError: 'github' is undefined\n</code></pre>","tags":["development","workflow","customization","testing","contributing"],"boost":3},{"location":"docker/","title":"Macro Syntax Error","text":"<p>File: <code>docker.md</code></p> <p>Line 302 in Markdown file: unexpected '.' <pre><code>docker compose ps --format \"table {{.Name}}\\t{{.Status}}\\t{{.Ports}}\"\n</code></pre></p>"},{"location":"operations/","title":"Macro Syntax Error","text":"<p>File: <code>operations.md</code></p> <p>Line 171 in Markdown file: unexpected '.' <pre><code>    tag: \"invoiceninja.{{.Name}}\"\n</code></pre></p>","tags":["operations","monitoring","maintenance","backup","performance"],"boost":4},{"location":"project-overview/","title":"Project Overview","text":"<p>Purpose Statement: This document describes what the invoiceninja-application project is and which upstream applications it packages.</p>","tags":["project","overview","architecture","upstream"],"boost":4},{"location":"project-overview/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Project Description</li> <li>Upstream Application</li> <li>Architecture Overview</li> <li>Image Policy</li> <li>Repository Structure</li> </ul>","tags":["project","overview","architecture","upstream"],"boost":4},{"location":"project-overview/#project-description","title":"Project Description","text":"<p>The invoiceninja-application project is a containerized deployment solution that packages and manages the Invoice Ninja invoicing and billing application. This repository provides production-ready Docker containers, Kubernetes manifests, and operational tooling for deploying Invoice Ninja in enterprise environments.</p> <p>Invoice Ninja is a comprehensive, open-source invoicing and billing platform that helps businesses manage their financial operations including invoice creation, payment processing, expense tracking, and client management.</p>","tags":["project","overview","architecture","upstream"],"boost":4},{"location":"project-overview/#upstream-application","title":"Upstream Application","text":"<p>Primary Application: Invoice Ninja v5.x Official Repository: https://github.com/invoiceninja/invoiceninja Official Documentation: https://invoiceninja.github.io/ Official Docker Images: https://hub.docker.com/r/invoiceninja/invoiceninja </p>","tags":["project","overview","architecture","upstream"],"boost":4},{"location":"project-overview/#architecture-overview","title":"Architecture Overview","text":"<p>This deployment consists of the following components:</p>","tags":["project","overview","architecture","upstream"],"boost":4},{"location":"project-overview/#core-services","title":"Core Services","text":"<ul> <li>Invoice Ninja Application - Laravel-based web application</li> <li>MariaDB Database - Primary data storage</li> <li>Redis Cache - Session storage and caching</li> <li>Alternative Database Support - PostgreSQL (configurable)</li> </ul>","tags":["project","overview","architecture","upstream"],"boost":4},{"location":"project-overview/#container-images","title":"Container Images","text":"<p>All images are built and maintained by webgrip organization:</p> <ul> <li><code>webgrip/invoiceninja-application.application:latest</code> - Main Invoice Ninja application</li> <li><code>webgrip/invoiceninja-application.mariadb:latest</code> - MariaDB database with optimizations</li> <li><code>webgrip/invoiceninja-application.redis:latest</code> - Redis cache server</li> <li><code>webgrip/invoiceninja-application.postgres:latest</code> - PostgreSQL alternative (optional)</li> </ul>","tags":["project","overview","architecture","upstream"],"boost":4},{"location":"project-overview/#image-policy","title":"Image Policy","text":"<p>Organizational Policy: All production deployments use organization-built images to ensure:</p> <ul> <li>Security scanning and vulnerability management</li> <li>Consistent base image standards</li> <li>Controlled update cycles</li> <li>Compliance with enterprise requirements</li> </ul> <p>Base Image Strategy: Images are built on pinned upstream official bases with minimal modification layers for security and maintainability.</p>","tags":["project","overview","architecture","upstream"],"boost":4},{"location":"project-overview/#repository-structure","title":"Repository Structure","text":"<pre><code>\u251c\u2500\u2500 docs/                    # Documentation\n\u2502   \u251c\u2500\u2500 adrs/               # Architectural Decision Records\n\u2502   \u2514\u2500\u2500 techdocs/           # MkDocs technical documentation\n\u251c\u2500\u2500 ops/                    # Operations and deployment\n\u2502   \u251c\u2500\u2500 docker/             # Dockerfiles for all services\n\u2502   \u251c\u2500\u2500 helm/               # Kubernetes Helm charts\n\u2502   \u2514\u2500\u2500 secrets/            # Encrypted secrets management\n\u251c\u2500\u2500 src/                    # Application source (if customizations exist)\n\u251c\u2500\u2500 tests/                  # Test suites\n\u251c\u2500\u2500 docker-compose.yml      # Local development environment\n\u2514\u2500\u2500 Makefile               # Operational commands\n</code></pre>","tags":["project","overview","architecture","upstream"],"boost":4},{"location":"project-overview/#sources","title":"Sources","text":"<p>All information in this document is derived from official Invoice Ninja sources and verified on 2025-01-09:</p> <ul> <li>Invoice Ninja Official Documentation, https://invoiceninja.github.io/, Retrieved 2025-01-09</li> <li>Invoice Ninja GitHub Repository, https://github.com/invoiceninja/invoiceninja, Retrieved 2025-01-09</li> <li>Invoice Ninja Docker Hub, https://hub.docker.com/r/invoiceninja/invoiceninja, Retrieved 2025-01-09</li> </ul>","tags":["project","overview","architecture","upstream"],"boost":4},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>Purpose Statement: This document covers the most frequent operational issues in the Invoice Ninja application stack and their solutions.</p>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Application Issues</li> <li>Database Issues</li> <li>Network and Connectivity Issues</li> <li>Performance Issues</li> <li>Container and Docker Issues</li> <li>Configuration Issues</li> </ul>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#application-issues","title":"Application Issues","text":"","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#application-wont-start","title":"Application Won't Start","text":"<p>Symptoms: - Container exits immediately - Health check fails - Application logs show startup errors</p> <p>Diagnostic Steps:</p> <pre><code># Check container status\ndocker-compose ps\n\n# View application logs\nmake logs SERVICE=invoiceninja-application.application\n\n# Check configuration\ndocker-compose config\n\n# Verify environment variables\ndocker-compose exec invoiceninja-application.application env | grep APP_\n</code></pre> <p>Common Causes and Solutions:</p> <ol> <li>Missing APP_KEY</li> </ol> <pre><code># Generate application key\nmake run CMD=\"php artisan key:generate\"\n\n# Verify key is set\ngrep APP_KEY .env\n</code></pre> <ol> <li>Database Connection Failed</li> </ol> <pre><code># Verify database is running\ndocker-compose ps invoiceninja-application.mariadb\n\n# Test database connectivity\ndocker-compose exec invoiceninja-application.mariadb mariadb \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  --execute=\"SELECT 1;\"\n\n# Check database credentials in .env\ngrep DB_ .env\n</code></pre> <ol> <li>Permission Issues</li> </ol> <pre><code># Fix file permissions\ndocker-compose exec invoiceninja-application.application chown -R www-data:www-data /var/www/html/storage\ndocker-compose exec invoiceninja-application.application chmod -R 755 /var/www/html/storage\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#application-responds-slowly","title":"Application Responds Slowly","text":"<p>Symptoms: - Page load times &gt; 5 seconds - Timeout errors - High CPU usage</p> <p>Diagnostic Steps:</p> <pre><code># Check resource usage\ndocker stats\n\n# Monitor application performance\ncurl -w \"@curl-format.txt\" -o /dev/null -s http://localhost:8080/\n\n# Check queue status\nmake run CMD=\"php artisan queue:work --once\"\n\n# Review slow queries\ndocker-compose exec invoiceninja-application.mariadb mariadb \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  --database=invoiceninja \\\n  --execute=\"\nSELECT \n    sql_text,\n    count_star,\n    avg_timer_wait/1000000000 as avg_seconds\nFROM performance_schema.events_statements_summary_by_digest \nORDER BY avg_timer_wait DESC \nLIMIT 10;\n\"\n</code></pre> <p>Solutions:</p> <ol> <li>Clear Application Cache</li> </ol> <pre><code>make run CMD=\"php artisan cache:clear\"\nmake run CMD=\"php artisan config:clear\"\nmake run CMD=\"php artisan route:clear\"\nmake run CMD=\"php artisan view:clear\"\n</code></pre> <ol> <li>Optimize for Production</li> </ol> <pre><code>make run CMD=\"php artisan config:cache\"\nmake run CMD=\"php artisan route:cache\"\nmake run CMD=\"php artisan view:cache\"\n</code></pre> <ol> <li>Increase Resource Limits</li> </ol> <p>Edit <code>docker-compose.yml</code>:</p> <pre><code>services:\n  invoiceninja-application.application:\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n          memory: 2G\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#error-500-internal-server-error","title":"Error 500 - Internal Server Error","text":"<p>Symptoms: - Application returns HTTP 500 - White page with no content - Generic error message</p> <p>Diagnostic Steps:</p> <pre><code># Enable debug mode temporarily\nsed -i 's/APP_DEBUG=false/APP_DEBUG=true/' .env\ndocker-compose restart invoiceninja-application.application\n\n# Check Laravel logs\nmake run CMD=\"tail -f storage/logs/laravel.log\"\n\n# Check PHP error log\ndocker-compose logs invoiceninja-application.application | grep -i error\n</code></pre> <p>Common Solutions:</p> <ol> <li>Fix Storage Permissions</li> </ol> <pre><code>make run CMD=\"chmod -R 755 storage\"\nmake run CMD=\"chmod -R 755 bootstrap/cache\"\n</code></pre> <ol> <li>Check Database Schema</li> </ol> <pre><code>make run CMD=\"php artisan migrate:status\"\nmake run CMD=\"php artisan migrate\"\n</code></pre> <ol> <li>Clear and Regenerate Caches</li> </ol> <pre><code>make run CMD=\"php artisan cache:clear\"\nmake run CMD=\"php artisan config:cache\"\n</code></pre> <p>Important: Disable debug mode after troubleshooting:</p> <pre><code>sed -i 's/APP_DEBUG=true/APP_DEBUG=false/' .env\ndocker-compose restart invoiceninja-application.application\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#database-issues","title":"Database Issues","text":"","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#database-connection-refused","title":"Database Connection Refused","text":"<p>Symptoms: - \"Connection refused\" errors - Database container not running - Application can't connect to database</p> <p>Diagnostic Steps:</p> <pre><code># Check database container status\ndocker-compose ps invoiceninja-application.mariadb\n\n# Check database logs\nmake logs SERVICE=invoiceninja-application.mariadb\n\n# Test connection from application container\ndocker-compose exec invoiceninja-application.application nc -zv invoiceninja-application.mariadb 3306\n</code></pre> <p>Solutions:</p> <ol> <li>Restart Database Service</li> </ol> <pre><code>docker-compose restart invoiceninja-application.mariadb\n\n# Wait for database to be ready\nsleep 15\ndocker-compose exec invoiceninja-application.mariadb mariadb \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  --execute=\"SELECT 1;\"\n</code></pre> <ol> <li>Check Network Connectivity</li> </ol> <pre><code># Verify network exists\ndocker network inspect webgrip\n\n# Recreate network if needed\ndocker network create webgrip\n</code></pre> <ol> <li>Verify Database Credentials</li> </ol> <pre><code># Check environment variables\ngrep DB_ .env\n\n# Test manual connection\ndocker-compose exec invoiceninja-application.mariadb mariadb \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  --database=invoiceninja \\\n  --execute=\"SELECT VERSION();\"\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#database-performance-issues","title":"Database Performance Issues","text":"<p>Symptoms: - Slow query responses - High database CPU usage - Connection timeouts</p> <p>Diagnostic Steps:</p> <pre><code># Check database performance\ndocker-compose exec invoiceninja-application.mariadb mariadb \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  --database=invoiceninja \\\n  --execute=\"\nSELECT \n    table_schema,\n    table_name,\n    table_rows,\n    data_length,\n    index_length\nFROM information_schema.tables \nWHERE table_schema = 'invoiceninja'\nORDER BY data_length DESC;\n\"\n\n# Monitor active connections\ndocker-compose exec invoiceninja-application.mariadb mariadb \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  --database=invoiceninja \\\n  --execute=\"SHOW PROCESSLIST;\"\n\"\n</code></pre> <p>Solutions:</p> <ol> <li>Optimize Database</li> </ol> <pre><code># Analyze tables\ndocker-compose exec invoiceninja-application.mariadb mariadb \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  --database=invoiceninja \\\n  --execute=\"ANALYZE TABLE invoices, clients, products;\"\n\n# Optimize database\ndocker-compose exec invoiceninja-application.mariadb mariadb \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  --database=invoiceninja \\\n  --execute=\"OPTIMIZE TABLE invoices, clients, products;\"\n</code></pre> <ol> <li>Add Missing Indexes</li> </ol> <pre><code># Identify missing indexes\nmake run CMD=\"php artisan db:show --counts\"\n\n# Run migrations to add indexes\nmake run CMD=\"php artisan migrate\"\n</code></pre> <ol> <li>Increase Database Resources</li> </ol> <p>Edit <code>docker-compose.yml</code>:</p> <pre><code>services:\n  invoiceninja-application.mariadb:\n    environment:\n      - MARIADB_INNODB_BUFFER_POOL_SIZE=256M\n      - MARIADB_INNODB_LOG_FILE_SIZE=64M\n    deploy:\n      resources:\n        limits:\n          memory: 2G\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#database-corruption","title":"Database Corruption","text":"<p>Symptoms: - Database container won't start - Data integrity errors - Corrupted data files</p> <p>Diagnostic Steps:</p> <pre><code># Check database logs for corruption\nmake logs SERVICE=invoiceninja-application.mariadb | grep -i corrupt\n\n# Check filesystem\ndocker run --rm -v invoiceninja-application-mariadb-data:/data busybox ls -la /data\n\n# Verify database integrity\ndocker-compose exec invoiceninja-application.mariadb mariadb \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  --database=invoiceninja \\\n  --execute=\"CHECK TABLE invoices, clients, products;\"\n</code></pre> <p>Recovery Steps:</p> <ol> <li>Stop Services</li> </ol> <pre><code>make stop\n</code></pre> <ol> <li>Attempt Database Repair</li> </ol> <pre><code># Start database in recovery mode\ndocker run --rm -it \\\n  -v invoiceninja-application-mariadb-data:/var/lib/mysql \\\n  mariadb:12.0.2-noble mariadb \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=root --password=root \\\n  invoiceninja\n\n# Check for corruption and repair\n# In MariaDB shell:\n# CHECK TABLE invoices, clients, products;\n# REPAIR TABLE invoices, clients, products;\n</code></pre> <ol> <li>Restore from Backup</li> </ol> <pre><code># Remove corrupted data\ndocker volume rm invoiceninja-application-mariadb-data\n\n# Create new volume\ndocker volume create invoiceninja-application-mariadb-data\n\n# Start database\ndocker-compose up -d invoiceninja-application.mariadb\nsleep 15\n\n# Restore from backup\ngunzip -c backups/latest/database.sql.gz | \\\n  docker-compose exec -T invoiceninja-application.mariadb \\\n  mariadb --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja invoiceninja\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#network-and-connectivity-issues","title":"Network and Connectivity Issues","text":"","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#cannot-access-application","title":"Cannot Access Application","text":"<p>Symptoms: - Browser shows \"connection refused\" - Curl commands fail - Application not reachable</p> <p>Diagnostic Steps:</p> <pre><code># Check if application is listening\ncurl -f http://localhost:8080/health\n\n# Verify port binding\ndocker-compose ps\nnetstat -tlnp | grep 8080\n\n# Check firewall rules\nsudo ufw status\nsudo iptables -L\n</code></pre> <p>Solutions:</p> <ol> <li>Verify Port Configuration</li> </ol> <p>Check <code>docker-compose.yml</code>:</p> <pre><code>services:\n  invoiceninja-application.application:\n    ports:\n      - \"127.0.0.1:8080:8080\"  # Correct binding\n      # Not: - \"8080:8080\"     # This exposes on all interfaces\n</code></pre> <ol> <li>Check Application Configuration</li> </ol> <pre><code># Verify APP_URL matches access URL\ngrep APP_URL .env\n\n# Check for proxy configuration\ngrep -i proxy .env\n</code></pre> <ol> <li>Network Troubleshooting</li> </ol> <pre><code># Test from host\ncurl -v http://localhost:8080/\n\n# Test from within container network\ndocker run --rm --network webgrip busybox wget -qO- http://invoiceninja-application.application:8080/health\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#ssltls-issues","title":"SSL/TLS Issues","text":"<p>Symptoms: - Certificate errors - Mixed content warnings - HTTPS not working</p> <p>Solutions:</p> <ol> <li>Configure Reverse Proxy</li> </ol> <pre><code># Nginx configuration\nserver {\n    listen 443 ssl;\n    server_name invoiceninja.yourcompany.com;\n\n    ssl_certificate /path/to/certificate.crt;\n    ssl_certificate_key /path/to/private.key;\n\n    location / {\n        proxy_pass http://localhost:8080;\n        proxy_set_header Host $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n    }\n}\n</code></pre> <ol> <li>Update Application Configuration</li> </ol> <pre><code># Update .env for HTTPS\nsed -i 's|APP_URL=http://|APP_URL=https://|' .env\ndocker-compose restart invoiceninja-application.application\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#performance-issues","title":"Performance Issues","text":"","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#high-memory-usage","title":"High Memory Usage","text":"<p>Symptoms: - Container memory usage &gt; 90% - Out of memory errors - Application crashes</p> <p>Diagnostic Steps:</p> <pre><code># Monitor memory usage\ndocker stats --no-stream\n\n# Check PHP memory configuration\nmake run CMD=\"php -i | grep memory_limit\"\n\n# Monitor application memory usage\nmake run CMD=\"php artisan tinker\" \n# In tinker: echo memory_get_usage(true);\n</code></pre> <p>Solutions:</p> <ol> <li>Increase Memory Limits</li> </ol> <p>Edit <code>docker-compose.yml</code>:</p> <pre><code>services:\n  invoiceninja-application.application:\n    deploy:\n      resources:\n        limits:\n          memory: 2G\n</code></pre> <ol> <li>Optimize PHP Configuration</li> </ol> <p>Create custom PHP configuration:</p> <pre><code># ops/docker/application/php.ini\nmemory_limit = 512M\nmax_execution_time = 300\nupload_max_filesize = 100M\npost_max_size = 100M\n</code></pre> <ol> <li>Clear Memory Leaks</li> </ol> <pre><code># Restart application\ndocker-compose restart invoiceninja-application.application\n\n# Clear all caches\nmake run CMD=\"php artisan cache:clear\"\nmake run CMD=\"php artisan queue:restart\"\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#high-cpu-usage","title":"High CPU Usage","text":"<p>Symptoms: - CPU usage consistently &gt; 80% - Slow response times - Queue processing delays</p> <p>Diagnostic Steps:</p> <pre><code># Monitor CPU usage\ndocker stats\n\n# Check for runaway processes\ndocker-compose exec invoiceninja-application.application top\n\n# Monitor queue workers\nmake run CMD=\"php artisan queue:work --once\"\n</code></pre> <p>Solutions:</p> <ol> <li>Optimize Queue Processing</li> </ol> <pre><code># Process queues in background\nmake run CMD=\"php artisan queue:work --daemon\" &amp;\n\n# Clear failed jobs\nmake run CMD=\"php artisan queue:flush\"\n</code></pre> <ol> <li>Scale Resources</li> </ol> <pre><code># docker-compose.yml\nservices:\n  invoiceninja-application.application:\n    deploy:\n      resources:\n        limits:\n          cpus: '2.0'\n        reservations:\n          cpus: '1.0'\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#container-and-docker-issues","title":"Container and Docker Issues","text":"","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#container-exits-immediately","title":"Container Exits Immediately","text":"<p>Symptoms: - Container status shows \"Exited (1)\" - Service doesn't stay running - Restart loop</p> <p>Diagnostic Steps:</p> <pre><code># Check exit status\ndocker-compose ps\n\n# View container logs\ndocker-compose logs invoiceninja-application.application\n\n# Run container interactively\ndocker-compose run --rm invoiceninja-application.application /bin/bash\n</code></pre> <p>Solutions:</p> <ol> <li>Fix Entrypoint Script</li> </ol> <pre><code># Check if entrypoint script is executable\ndocker-compose run --rm invoiceninja-application.application ls -la /entrypoint.sh\n\n# Make executable if needed\ndocker-compose exec invoiceninja-application.application chmod +x /entrypoint.sh\n</code></pre> <ol> <li>Verify Dependencies</li> </ol> <pre><code># Check if required files exist\ndocker-compose run --rm invoiceninja-application.application ls -la /var/www/html\n\n# Verify PHP configuration\ndocker-compose run --rm invoiceninja-application.application php --version\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#image-build-failures","title":"Image Build Failures","text":"<p>Symptoms: - Docker build fails - Missing dependencies - Build context issues</p> <p>Solutions:</p> <ol> <li>Clear Build Cache</li> </ol> <pre><code># Remove build cache\ndocker system prune -f\ndocker-compose build --no-cache\n</code></pre> <ol> <li>Check Dockerfile</li> </ol> <pre><code># Validate Dockerfile syntax\ndocker run --rm -i hadolint/hadolint &lt; ops/docker/application/Dockerfile\n</code></pre> <ol> <li>Verify Build Context</li> </ol> <pre><code># Check .dockerignore\ncat .dockerignore\n\n# Verify required files are present\nls -la ops/docker/application/\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#configuration-issues","title":"Configuration Issues","text":"","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#environment-variables-not-applied","title":"Environment Variables Not Applied","text":"<p>Symptoms: - Configuration changes don't take effect - Application uses default values - Settings not persisted</p> <p>Solutions:</p> <ol> <li>Restart After Configuration Changes</li> </ol> <pre><code># Always restart after .env changes\ndocker-compose restart invoiceninja-application.application\n\n# Verify environment variables\ndocker-compose exec invoiceninja-application.application env | grep APP_\n</code></pre> <ol> <li>Clear Configuration Cache</li> </ol> <pre><code>make run CMD=\"php artisan config:clear\"\nmake run CMD=\"php artisan config:cache\"\n</code></pre> <ol> <li>Validate Configuration Format</li> </ol> <pre><code># Check .env syntax\ncat .env | grep -v '^#' | grep -v '^$'\n\n# Validate docker-compose.yml\ndocker-compose config\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#email-configuration-issues","title":"Email Configuration Issues","text":"<p>Symptoms: - Emails not being sent - SMTP authentication failures - Mail queue backing up</p> <p>Diagnostic Steps:</p> <pre><code># Test mail configuration\nmake run CMD=\"php artisan tinker\"\n# In tinker: Mail::raw('Test email', function($msg) { $msg-&gt;to('test@example.com')-&gt;subject('Test'); });\n\n# Check mail queue\nmake run CMD=\"php artisan queue:work --once\"\n\n# View mail logs\ndocker-compose logs invoiceninja-application.application | grep -i mail\n</code></pre> <p>Solutions:</p> <ol> <li>Verify SMTP Settings</li> </ol> <pre><code># Check mail configuration\ngrep MAIL_ .env\n\n# Test SMTP connection\ntelnet your-smtp-server.com 587\n</code></pre> <ol> <li>Configure Mail Queue</li> </ol> <pre><code># Process mail queue\nmake run CMD=\"php artisan queue:work --queue=mail --once\"\n\n# Clear failed mail jobs\nmake run CMD=\"php artisan queue:flush\"\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#emergency-recovery-procedures","title":"Emergency Recovery Procedures","text":"","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#complete-system-recovery","title":"Complete System Recovery","text":"<p>When all else fails:</p> <pre><code># 1. Stop all services\nmake stop\n\n# 2. Backup current state\nmkdir -p emergency-backup\ndocker run --rm -v invoiceninja-application-mariadb-data:/data -v $(pwd)/emergency-backup:/backup busybox cp -a /data/. /backup/\n\n# 3. Reset to known good state\ngit checkout HEAD~1 -- docker-compose.yml .env\n\n# 4. Pull fresh images\ndocker-compose pull\n\n# 5. Start services\nmake start\n\n# 6. Verify health\nmake wait-ready URL=http://localhost:8080/health\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#data-recovery","title":"Data Recovery","text":"<pre><code># Restore from latest backup\nLATEST_BACKUP=$(ls -1 backups/ | tail -1)\necho \"Restoring from: $LATEST_BACKUP\"\n\n# Stop services\nmake stop\n\n# Restore database\ndocker volume rm invoiceninja-application-mariadb-data\ndocker volume create invoiceninja-application-mariadb-data\ndocker-compose up -d invoiceninja-application.mariadb\nsleep 15\n\ngunzip -c \"backups/$LATEST_BACKUP/database.sql.gz\" | \\\n  docker-compose exec -T invoiceninja-application.mariadb \\\n  mariadb --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja invoiceninja\n\n# Restore application data\ndocker volume rm invoiceninja-application-application-data\ndocker volume create invoiceninja-application-application-data\ndocker run --rm -v invoiceninja-application-application-data:/data \\\n  -v $(pwd)/backups/$LATEST_BACKUP:/backup \\\n  busybox tar xzf /backup/application-data.tar.gz -C /data\n\n# Start all services\nmake start\n</code></pre>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"troubleshooting/#sources","title":"Sources","text":"<p>Troubleshooting procedures are based on common issues and solutions from Invoice Ninja community and Docker best practices:</p> <ul> <li>Invoice Ninja Troubleshooting Guide, https://invoiceninja.github.io/en/troubleshooting/, Retrieved 2025-01-09</li> <li>Laravel Debugging Documentation, https://laravel.com/docs/10.x/errors, Retrieved 2025-01-09</li> <li>Docker Troubleshooting Guide, https://docs.docker.com/config/containers/troubleshoot/, Retrieved 2025-01-09</li> <li>PostgreSQL Common Problems, https://www.postgresql.org/docs/13/problems.html, Retrieved 2025-01-09</li> <li>MariaDB Troubleshooting Guide, https://mariadb.com/kb/en/troubleshooting/, Retrieved 2025-01-09</li> </ul>","tags":["troubleshooting","issues","solutions","debugging","error-handling"],"boost":4},{"location":"upstream-application/","title":"Upstream Application Facts","text":"<p>Purpose Statement: This document provides comprehensive facts about Invoice Ninja derived from official upstream documentation sources.</p>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Application Purpose and Features</li> <li>Supported Versions and Lifecycle</li> <li>Configuration Approach</li> <li>Supported Components</li> <li>System Requirements</li> <li>Security Considerations</li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#application-purpose-and-features","title":"Application Purpose and Features","text":"<p>Invoice Ninja is a comprehensive invoicing and billing platform designed for freelancers, small businesses, and enterprises. The application provides:</p>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#core-features","title":"Core Features","text":"<ul> <li>Invoice Management - Create, customize, and send professional invoices</li> <li>Payment Processing - Integrate with 45+ payment gateways including Stripe, PayPal, Square</li> <li>Expense Tracking - Monitor business expenses and attach receipts</li> <li>Time Tracking - Track billable hours with built-in timer functionality</li> <li>Client Management - Maintain detailed client profiles and communication history</li> <li>Project Management - Organize work by projects and track profitability</li> <li>Reporting - Generate comprehensive financial reports and analytics</li> <li>Multi-company Support - Manage multiple companies from single installation</li> <li>Multi-language Support - Available in 60+ languages</li> <li>Custom Branding - White-label solution with custom domain support</li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#advanced-features","title":"Advanced Features","text":"<ul> <li>Recurring Invoices - Automated billing for subscription services</li> <li>Purchase Orders - Vendor management and procurement workflows</li> <li>Inventory Management - Product catalog and stock tracking</li> <li>API Integration - RESTful API for third-party integrations</li> <li>Mobile Applications - iOS and Android apps for on-the-go management</li> <li>Bank Integration - Connect bank accounts for transaction matching</li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#supported-versions-and-lifecycle","title":"Supported Versions and Lifecycle","text":"","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#current-stable-version","title":"Current Stable Version","text":"<p>Version 5.x - Current stable release line PHP Requirements: PHP 8.1+ (PHP 8.2 recommended) Laravel Framework: Built on Laravel 10.x  </p>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#version-lifecycle-policy","title":"Version Lifecycle Policy","text":"<ul> <li>Major Releases - Annual release cycle with breaking changes</li> <li>Minor Releases - Quarterly feature updates</li> <li>Patch Releases - Monthly security and bug fixes</li> <li>LTS Support - Each major version supported for 2 years</li> <li>Security Updates - Critical security patches for all supported versions</li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#upgrade-path","title":"Upgrade Path","text":"<p>Invoice Ninja follows semantic versioning with automated database migrations between versions. Major version upgrades require careful planning due to potential breaking changes in API endpoints and configuration options.</p>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#configuration-approach","title":"Configuration Approach","text":"","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#environment-variables","title":"Environment Variables","text":"<p>Invoice Ninja uses Laravel's environment-based configuration system:</p> Category Variables Purpose Database <code>DB_HOST</code>, <code>DB_DATABASE</code>, <code>DB_USERNAME</code>, <code>DB_PASSWORD</code> Database connection Application <code>APP_URL</code>, <code>APP_ENV</code>, <code>APP_DEBUG</code>, <code>APP_KEY</code> Core application settings Mail <code>MAIL_MAILER</code>, <code>MAIL_HOST</code>, <code>MAIL_PORT</code>, <code>MAIL_USERNAME</code> Email configuration Cache <code>CACHE_DRIVER</code>, <code>REDIS_HOST</code>, <code>REDIS_PORT</code> Caching and sessions Queue <code>QUEUE_CONNECTION</code>, <code>QUEUE_DRIVER</code> Background job processing File Storage <code>FILESYSTEM_DRIVER</code>, <code>AWS_*</code> File upload handling","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#configuration-files","title":"Configuration Files","text":"<ul> <li><code>.env</code> - Primary configuration file (not version controlled)</li> <li><code>config/</code> - Laravel configuration files</li> <li><code>database/</code> - Database migrations and seeders</li> <li><code>storage/</code> - Application data, logs, and uploads</li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#docker-support","title":"Docker Support","text":"<p>Invoice Ninja provides official Docker images with the following characteristics:</p> <ul> <li>Base Image: <code>php:8.2-fpm-alpine</code></li> <li>Web Server: Nginx (separate container recommended)</li> <li>Default Port: 80 (web) / 9000 (php-fpm)</li> <li>Volume Mounts: <code>/var/www/app/public</code>, <code>/var/www/app/storage</code></li> <li>Health Check: Built-in health endpoint at <code>/health</code></li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#helm-chart-support","title":"Helm Chart Support","text":"<p>Official Helm charts are available with configurable values:</p> Value Default Description <code>image.tag</code> <code>latest</code> Invoice Ninja version <code>database.type</code> <code>mysql</code> Database type (mysql/pgsql) <code>ingress.enabled</code> <code>false</code> Enable ingress controller <code>persistence.enabled</code> <code>true</code> Enable persistent storage <code>resources.requests.memory</code> <code>512Mi</code> Minimum memory allocation","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#supported-components","title":"Supported Components","text":"","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#database-support","title":"Database Support","text":"<p>Primary Databases: - MySQL 8.0+ (Recommended) - PostgreSQL 13+  - MariaDB 10.4+</p> <p>Database Requirements: - UTF8MB4 character set support - InnoDB storage engine (MySQL/MariaDB) - Minimum 1GB storage space</p>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#cache-backends","title":"Cache Backends","text":"<p>Supported Cache Drivers: - Redis (Recommended for production) - Memcached - Database (fallback option) - File (development only)</p>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#mail-configuration","title":"Mail Configuration","text":"<p>Supported Mail Drivers: - SMTP (Most common) - Mailgun - Postmark - Amazon SES - SendGrid</p>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#queue-backends","title":"Queue Backends","text":"<p>Supported Queue Drivers: - Redis (Recommended) - Database - Amazon SQS - Beanstalkd</p>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#file-storage","title":"File Storage","text":"<p>Supported Filesystems: - Local Storage (default) - Amazon S3 - Google Cloud Storage - DigitalOcean Spaces - Azure Blob Storage</p>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#system-requirements","title":"System Requirements","text":"","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>CPU: 1 core (2 cores recommended)</li> <li>RAM: 1GB (2GB recommended)</li> <li>Storage: 5GB (10GB+ for production)</li> <li>PHP: 8.1+ with extensions: BCMath, Ctype, Fileinfo, JSON, Mbstring, OpenSSL, PDO, Tokenizer, XML, ZIP, GMP</li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#production-requirements","title":"Production Requirements","text":"<ul> <li>CPU: 2+ cores</li> <li>RAM: 4GB+</li> <li>Storage: 20GB+ SSD</li> <li>Database: Dedicated database server</li> <li>Cache: Redis cluster for high availability</li> <li>Load Balancer: For multi-instance deployments</li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#network-requirements","title":"Network Requirements","text":"<ul> <li>Inbound Ports: 80 (HTTP), 443 (HTTPS)</li> <li>Outbound Access: Required for payment gateway APIs, email sending, updates</li> <li>CDN Support: CloudFlare, AWS CloudFront compatibility</li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#security-considerations","title":"Security Considerations","text":"","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#authentication","title":"Authentication","text":"<ul> <li>Multi-factor Authentication - TOTP and SMS support</li> <li>LDAP Integration - Enterprise directory services</li> <li>OAuth Providers - Google, Microsoft, GitHub</li> <li>Session Security - Secure session handling with Redis</li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#data-protection","title":"Data Protection","text":"<ul> <li>Encryption at Rest - Database encryption support</li> <li>HTTPS Enforcement - SSL/TLS required for production</li> <li>CSRF Protection - Built-in Laravel CSRF tokens</li> <li>XSS Prevention - Input sanitization and output encoding</li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#compliance-features","title":"Compliance Features","text":"<ul> <li>GDPR Compliance - Data export and deletion tools</li> <li>Audit Logs - Comprehensive activity logging</li> <li>Role-based Access - Granular permission system</li> <li>Data Backup - Automated backup functionality</li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"upstream-application/#sources","title":"Sources","text":"<p>All information in this document is derived from official Invoice Ninja sources and verified on 2025-01-09:</p> <ul> <li>Invoice Ninja Official Documentation, https://invoiceninja.github.io/, Retrieved 2025-01-09</li> <li>Invoice Ninja Installation Guide, https://invoiceninja.github.io/en/self-host-installation/, Retrieved 2025-01-09</li> <li>Invoice Ninja Docker Documentation, https://invoiceninja.github.io/en/self-host-installation/#docker, Retrieved 2025-01-09</li> <li>Invoice Ninja GitHub Repository, https://github.com/invoiceninja/invoiceninja, Retrieved 2025-01-09</li> <li>Invoice Ninja System Requirements, https://invoiceninja.github.io/en/requirements/, Retrieved 2025-01-09</li> <li>Laravel 10.x Documentation, https://laravel.com/docs/10.x, Retrieved 2025-01-09</li> </ul>","tags":["invoice-ninja","upstream","reference","laravel"],"boost":3},{"location":"configuration/","title":"Configuration Overview","text":"<p>This section provides comprehensive information about configuring the Invoice Ninja application deployment.</p>","tags":["configuration","overview","environment-variables","docker-compose"],"boost":4},{"location":"configuration/#configuration-areas","title":"Configuration Areas","text":"<ul> <li>Environment Variables - All required and optional environment variables</li> <li>Volume Mounts - Data persistence and volume configuration</li> <li>Service Configuration - Docker Compose service definitions</li> <li>Network Configuration - Network setup and port mappings</li> <li>Security Configuration - Security settings and best practices</li> </ul>","tags":["configuration","overview","environment-variables","docker-compose"],"boost":4},{"location":"configuration/#quick-reference","title":"Quick Reference","text":"<p>For quick deployment, copy <code>.env.example</code> to <code>.env</code> and configure these required variables:</p> <ul> <li><code>APP_KEY</code> - Generate with <code>make generate-key</code></li> <li><code>DB_PASSWORD</code> - Strong database password</li> <li><code>MAIL_*</code> - SMTP configuration for production</li> </ul> <p>See Environment Variables for complete details.</p>","tags":["configuration","overview","environment-variables","docker-compose"],"boost":4},{"location":"configuration/environment-variables/","title":"Environment Variables","text":"<p>All configuration follows Laravel convention with <code>.env</code> file or environment variable injection.</p>","tags":["configuration","environment-variables","reference","laravel"],"boost":4},{"location":"configuration/environment-variables/#required-environment-variables","title":"Required Environment Variables","text":"Variable Purpose Default Constraints <code>APP_KEY</code> Laravel application encryption key Must be generated 32-character base64 string <code>APP_URL</code> Base URL for the application <code>http://localhost</code> Must include protocol <code>DB_HOST</code> Database server hostname <code>invoiceninja-application.mariadb</code> Resolvable hostname <code>DB_DATABASE</code> Database name <code>invoiceninja</code> Must exist or be creatable <code>DB_USERNAME</code> Database username <code>invoiceninja</code> Must have full privileges <code>DB_PASSWORD</code> Database password Required Strong password recommended","tags":["configuration","environment-variables","reference","laravel"],"boost":4},{"location":"configuration/environment-variables/#application-configuration","title":"Application Configuration","text":"Variable Purpose Default Options <code>APP_ENV</code> Application environment <code>production</code> <code>local</code>, <code>staging</code>, <code>production</code> <code>APP_DEBUG</code> Enable debug mode <code>false</code> <code>true</code>, <code>false</code> (never true in production) <code>APP_LOCALE</code> Default application locale <code>en</code> ISO 639-1 language codes <code>APP_TIMEZONE</code> Application timezone <code>UTC</code> PHP timezone identifiers <code>SUBDOMAIN</code> Application subdomain <code>invoiceninja-application</code> DNS-safe string <code>DOMAIN_NAME</code> Primary domain <code>webgrip.test</code> Valid domain name","tags":["configuration","environment-variables","reference","laravel"],"boost":4},{"location":"configuration/environment-variables/#database-configuration","title":"Database Configuration","text":"Variable Purpose Default Constraints <code>DB_CONNECTION</code> Database driver <code>mysql</code> <code>mysql</code>, <code>pgsql</code>, <code>mariadb</code> <code>DB_PORT</code> Database port <code>3306</code> 1-65535 <code>DB_ROOT_PASSWORD</code> Root database password Required for initialization MariaDB/MySQL only","tags":["configuration","environment-variables","reference","laravel"],"boost":4},{"location":"configuration/environment-variables/#cache-and-session-configuration","title":"Cache and Session Configuration","text":"Variable Purpose Default Options <code>CACHE_DRIVER</code> Cache backend <code>redis</code> <code>redis</code>, <code>database</code>, <code>file</code> <code>SESSION_DRIVER</code> Session storage <code>redis</code> <code>redis</code>, <code>database</code>, <code>file</code> <code>REDIS_HOST</code> Redis server hostname <code>invoiceninja-application.redis</code> Resolvable hostname <code>REDIS_PORT</code> Redis server port <code>6379</code> 1-65535 <code>REDIS_PASSWORD</code> Redis authentication (empty) Optional, but recommended <code>REDIS_DB</code> Redis database number <code>0</code> 0-15","tags":["configuration","environment-variables","reference","laravel"],"boost":4},{"location":"configuration/environment-variables/#queue-configuration","title":"Queue Configuration","text":"Variable Purpose Default Options <code>QUEUE_CONNECTION</code> Queue backend <code>redis</code> <code>redis</code>, <code>database</code>, <code>sync</code> <code>QUEUE_DRIVER</code> Legacy queue setting <code>redis</code> Same as QUEUE_CONNECTION","tags":["configuration","environment-variables","reference","laravel"],"boost":4},{"location":"configuration/environment-variables/#mail-configuration","title":"Mail Configuration","text":"Variable Purpose Default Required for Production <code>MAIL_MAILER</code> Mail driver <code>smtp</code> Yes <code>MAIL_HOST</code> SMTP server (empty) Yes <code>MAIL_PORT</code> SMTP port <code>587</code> Yes <code>MAIL_USERNAME</code> SMTP username (empty) Yes <code>MAIL_PASSWORD</code> SMTP password (empty) Yes <code>MAIL_ENCRYPTION</code> SMTP encryption <code>tls</code> <code>tls</code>, <code>ssl</code>, <code>null</code> <code>MAIL_FROM_ADDRESS</code> Sender email (empty) Yes <code>MAIL_FROM_NAME</code> Sender name (empty) Yes","tags":["configuration","environment-variables","reference","laravel"],"boost":4},{"location":"configuration/environment-variables/#optional-environment-variables","title":"Optional Environment Variables","text":"Variable Purpose Default Notes <code>TZ</code> Container timezone <code>UTC</code> System timezone <code>LOG_CHANNEL</code> Logging driver <code>daily</code> <code>daily</code>, <code>single</code>, <code>syslog</code> <code>BROADCAST_DRIVER</code> Real-time broadcasting <code>null</code> <code>pusher</code>, <code>redis</code>, <code>null</code> <code>FILESYSTEM_DRIVER</code> File storage <code>local</code> <code>local</code>, <code>s3</code>, <code>gcs</code>","tags":["configuration","environment-variables","reference","laravel"],"boost":4},{"location":"configuration/environment-variables/#sources","title":"Sources","text":"<ul> <li>Invoice Ninja Environment Configuration, https://invoiceninja.github.io/en/self-host-installation/#environment-variables, Retrieved 2025-01-09</li> <li>Laravel Configuration Documentation, https://laravel.com/docs/10.x/configuration, Retrieved 2025-01-09</li> </ul>","tags":["configuration","environment-variables","reference","laravel"],"boost":4},{"location":"configuration/networking/","title":"Network Configuration","text":"","tags":["configuration","networking","docker","ports"],"boost":3},{"location":"configuration/networking/#docker-compose-networking","title":"Docker Compose Networking","text":"<ul> <li>Network Name: <code>webgrip</code> (external)</li> <li>Network Type: Bridge network</li> <li>DNS Resolution: Automatic container name resolution</li> <li>External Access: Only application service exposed on localhost</li> </ul>","tags":["configuration","networking","docker","ports"],"boost":3},{"location":"configuration/networking/#port-mappings","title":"Port Mappings","text":"Service Internal Port External Port Access Application 8080 8080 localhost:8080 MariaDB 3306 3306 localhost:3306 (development) PostgreSQL 5432 5432 localhost:5432 (development) Redis 6379 None Internal only","tags":["configuration","networking","docker","ports"],"boost":3},{"location":"configuration/networking/#service-discovery","title":"Service Discovery","text":"<p>Services communicate using Docker Compose service names: - <code>invoiceninja-application.application</code> - <code>invoiceninja-application.mariadb</code> - <code>invoiceninja-application.redis</code> - <code>invoiceninja-application.postgres</code></p>","tags":["configuration","networking","docker","ports"],"boost":3},{"location":"configuration/networking/#sources","title":"Sources","text":"<ul> <li>Docker Compose File Reference, https://docs.docker.com/compose/compose-file/, Retrieved 2025-01-09</li> </ul>","tags":["configuration","networking","docker","ports"],"boost":3},{"location":"configuration/security/","title":"Security Configuration","text":"","tags":["configuration","security","best-practices","compliance"],"boost":4},{"location":"configuration/security/#container-security","title":"Container Security","text":"<ul> <li>User Context: Non-root user (where applicable)</li> <li>Read-only Filesystem: Applied to non-data directories</li> <li>Capabilities: Minimal required capabilities only</li> <li>Security Scanning: Regular vulnerability scanning enabled</li> </ul>","tags":["configuration","security","best-practices","compliance"],"boost":4},{"location":"configuration/security/#network-security","title":"Network Security","text":"<ul> <li>Principle of Least Exposure: Only application port exposed externally</li> <li>Internal Communication: Database and cache services not exposed</li> <li>Firewall Rules: Restrict access to management ports</li> <li>TLS Encryption: HTTPS required for production deployments</li> </ul>","tags":["configuration","security","best-practices","compliance"],"boost":4},{"location":"configuration/security/#secret-management","title":"Secret Management","text":"<ul> <li>Environment Files: <code>.env</code> files excluded from version control</li> <li>SOPS Encryption: Sensitive configuration encrypted with age</li> <li>Key Management: Age keys stored in GitHub secrets</li> <li>Rotation Policy: Regular secret rotation recommended</li> </ul>","tags":["configuration","security","best-practices","compliance"],"boost":4},{"location":"configuration/security/#compliance-considerations","title":"Compliance Considerations","text":"<ul> <li>Data Encryption: Database encryption enabled for sensitive data</li> <li>Audit Logging: Application-level audit trails enabled</li> <li>Access Controls: Role-based access control within application</li> <li>Backup Encryption: Encrypted backups with separate key management</li> </ul>","tags":["configuration","security","best-practices","compliance"],"boost":4},{"location":"configuration/services/","title":"Service Configuration","text":"","tags":["configuration","services","docker-compose","health-checks"],"boost":3},{"location":"configuration/services/#application-service","title":"Application Service","text":"<pre><code>Container: invoiceninja-application.application\nImage: webgrip/invoiceninja-application.application:latest\nPorts: 8080:8080 (HTTP)\nHealth Check: curl -f http://localhost:8080/health\nDependencies: mariadb, redis\nRestart Policy: always\n</code></pre> <p>Health Check Configuration: - Endpoint: <code>/health</code> - Interval: 15 seconds - Timeout: 5 seconds - Retries: 10 - Start Period: 20 seconds</p>","tags":["configuration","services","docker-compose","health-checks"],"boost":3},{"location":"configuration/services/#mariadb-service","title":"MariaDB Service","text":"<pre><code>Container: invoiceninja-application.mariadb\nImage: webgrip/invoiceninja-application.mariadb:latest\nPorts: 3306:3306 (Internal)\nHealth Check: mariadb --socket=/var/run/mysqld/mysqld.sock --user=${DB_USERNAME} --password=${DB_PASSWORD} --execute=SELECT 1\nRestart Policy: unless-stopped\nLogging: 10MB max file size\n</code></pre> <p>MariaDB Configuration: - Character Set: utf8mb4 - Collation: utf8mb4_unicode_ci - Timezone: UTC - Max Connections: 100 (default) - Shared Buffers: 25% of available RAM</p>","tags":["configuration","services","docker-compose","health-checks"],"boost":3},{"location":"configuration/services/#redis-service","title":"Redis Service","text":"<pre><code>Container: invoiceninja-application.redis\nImage: webgrip/invoiceninja-application.redis:latest\nPorts: None (Internal only)\nHealth Check: redis-cli ping\nRestart Policy: always\nPersistence: Enabled via volume mount\n</code></pre> <p>Redis Configuration: - Persistence: RDB snapshots + AOF logging - Memory Policy: allkeys-lru - Max Memory: 256MB (configurable) - Timeout: 300 seconds</p>","tags":["configuration","services","docker-compose","health-checks"],"boost":3},{"location":"configuration/services/#postgresql-service-alternative","title":"PostgreSQL Service (Alternative)","text":"<pre><code>Container: invoiceninja-application.postgres (commented out by default)\nImage: webgrip/invoiceninja-application.postgres:latest\nPorts: 5432:5432 (Internal)\nHealth Check: pg_isready -U ${DB_USERNAME}\nCharacter Set: UTF8\nCollation: en_US.utf8\n</code></pre>","tags":["configuration","services","docker-compose","health-checks"],"boost":3},{"location":"configuration/services/#sources","title":"Sources","text":"<ul> <li>Docker Compose File Reference, https://docs.docker.com/compose/compose-file/, Retrieved 2025-01-09</li> <li>MariaDB Docker Documentation, https://hub.docker.com/_/mariadb, Retrieved 2025-01-09</li> <li>PostgreSQL Docker Documentation, https://hub.docker.com/_/postgres, Retrieved 2025-01-09</li> <li>Redis Configuration Reference, https://redis.io/topics/config, Retrieved 2025-01-09</li> </ul>","tags":["configuration","services","docker-compose","health-checks"],"boost":3},{"location":"configuration/volumes/","title":"Volume Mounts and Persistence","text":"","tags":["configuration","volumes","persistence","docker","backup"],"boost":3},{"location":"configuration/volumes/#application-data-volumes","title":"Application Data Volumes","text":"Container Path Volume Name Purpose Backup Required <code>/data</code> <code>invoiceninja-application-application-data</code> Application uploads, public assets Yes","tags":["configuration","volumes","persistence","docker","backup"],"boost":3},{"location":"configuration/volumes/#database-data-volumes","title":"Database Data Volumes","text":"Container Path Volume Name Purpose Backup Required <code>/var/lib/mysql</code> <code>invoiceninja-application-mariadb-data</code> MariaDB database files Critical <code>/var/lib/postgresql/data</code> <code>invoiceninja-application-postgres-data</code> PostgreSQL database files (alternative) Critical","tags":["configuration","volumes","persistence","docker","backup"],"boost":3},{"location":"configuration/volumes/#cache-data-volumes","title":"Cache Data Volumes","text":"Container Path Volume Name Purpose Backup Required <code>/data</code> <code>invoiceninja-application-redis-data</code> Redis persistence Recommended","tags":["configuration","volumes","persistence","docker","backup"],"boost":3},{"location":"configuration/volumes/#volume-characteristics","title":"Volume Characteristics","text":"<ul> <li>Persistence: All named volumes persist data across container restarts</li> <li>Performance: Use SSD storage for database volumes in production</li> <li>Backup Strategy: Database volumes require daily backups with point-in-time recovery</li> <li>Security: Volumes should be encrypted at rest in production environments</li> </ul>","tags":["configuration","volumes","persistence","docker","backup"],"boost":3},{"location":"configuration/volumes/#sources","title":"Sources","text":"<ul> <li>Docker Compose File Reference, https://docs.docker.com/compose/compose-file/, Retrieved 2025-01-09</li> </ul>","tags":["configuration","volumes","persistence","docker","backup"],"boost":3},{"location":"deployment/","title":"Deployment Overview","text":"<p>This section provides comprehensive information about deploying and managing the Invoice Ninja application.</p>","tags":["deployment","overview","quickstart","docker-compose"],"boost":4},{"location":"deployment/#deployment-areas","title":"Deployment Areas","text":"<ul> <li>Prerequisites - System requirements and setup</li> <li>Initial Setup - First-time deployment configuration</li> <li>Deployment Procedures - Step-by-step deployment process</li> <li>Upgrade Procedures - Application updates and maintenance</li> <li>Rollback Procedures - Recovery and rollback procedures</li> <li>Production Considerations - Production-specific configuration</li> </ul>","tags":["deployment","overview","quickstart","docker-compose"],"boost":4},{"location":"deployment/#quick-start","title":"Quick Start","text":"<p>For immediate deployment on a clean system:</p> <pre><code>git clone https://github.com/webgrip/invoiceninja-application.git\ncd invoiceninja-application\ncp .env.example .env\n# Edit .env with your configuration\nmake start\n</code></pre> <p>Access the application at <code>http://localhost:8080</code> after startup completes.</p> <p>See Initial Setup for detailed configuration instructions.</p>","tags":["deployment","overview","quickstart","docker-compose"],"boost":4},{"location":"deployment/initial-setup/","title":"Initial Setup","text":"","tags":["deployment","setup","configuration","environment"],"boost":4},{"location":"deployment/initial-setup/#1-repository-clone-and-configuration","title":"1. Repository Clone and Configuration","text":"<pre><code># Clone the repository\ngit clone https://github.com/webgrip/invoiceninja-application.git\ncd invoiceninja-application\n\n# Copy and configure environment\ncp .env.example .env\n</code></pre>","tags":["deployment","setup","configuration","environment"],"boost":4},{"location":"deployment/initial-setup/#2-environment-configuration","title":"2. Environment Configuration","text":"<p>Edit <code>.env</code> file with your specific settings:</p> <pre><code># Required: Set strong database credentials\nDB_DATABASE=invoiceninja\nDB_USERNAME=invoiceninja_user\nDB_PASSWORD=&lt;generate-strong-password&gt;\nDB_ROOT_PASSWORD=&lt;generate-strong-root-password&gt;\n\n# Required: Set your domain\nSUBDOMAIN=invoiceninja\nDOMAIN_NAME=yourcompany.com\nAPP_URL=https://invoiceninja.yourcompany.com\n\n# Required: Application key (will be generated)\nAPP_KEY=\n\n# Recommended: Mail configuration\nMAIL_MAILER=smtp\nMAIL_HOST=your-smtp-server.com\nMAIL_PORT=587\nMAIL_USERNAME=your-email@yourcompany.com\nMAIL_PASSWORD=your-email-password\nMAIL_ENCRYPTION=tls\nMAIL_FROM_ADDRESS=noreply@yourcompany.com\nMAIL_FROM_NAME=\"Your Company Invoices\"\n</code></pre>","tags":["deployment","setup","configuration","environment"],"boost":4},{"location":"deployment/initial-setup/#3-secret-management-production","title":"3. Secret Management (Production)","text":"<p>For production deployments, use encrypted secrets:</p> <pre><code># Initialize age encryption\nmake secrets:init\n\n# Add your secrets to the decrypted file\nnano ops/secrets/invoiceninja-application-secrets/values.dec.yaml\n\n# Encrypt the secrets\nmake secrets:encrypt SECRETS_DIR=./ops/secrets/invoiceninja-application-secrets\n\n# Add the age key to your deployment environment\nexport SOPS_AGE_KEY=$(cat .age.key)\n</code></pre>","tags":["deployment","setup","configuration","environment"],"boost":4},{"location":"deployment/initial-setup/#4-network-setup","title":"4. Network Setup","text":"<p>Create the required Docker network:</p> <pre><code># Create external network\ndocker network create webgrip\n</code></pre>","tags":["deployment","setup","configuration","environment"],"boost":4},{"location":"deployment/initial-setup/#next-steps","title":"Next Steps","text":"<p>After completing initial setup, proceed to Deployment Procedures for the actual deployment process.</p>","tags":["deployment","setup","configuration","environment"],"boost":4},{"location":"deployment/prerequisites/","title":"Prerequisites","text":"","tags":["deployment","prerequisites","requirements","setup"],"boost":3},{"location":"deployment/prerequisites/#system-requirements","title":"System Requirements","text":"<ul> <li>Docker Engine: 20.10+ with Docker Compose V2</li> <li>Operating System: Linux (Ubuntu 20.04+, RHEL 8+, or equivalent)</li> <li>Memory: 4GB RAM minimum (8GB recommended for production)</li> <li>Storage: 20GB available space (SSD recommended)</li> <li>Network: Outbound internet access for image pulls and updates</li> </ul>","tags":["deployment","prerequisites","requirements","setup"],"boost":3},{"location":"deployment/prerequisites/#required-tools","title":"Required Tools","text":"<p>Install the following tools on the deployment host:</p> <pre><code># Docker and Docker Compose\ncurl -fsSL https://get.docker.com | sh\nsudo usermod -aG docker $USER\n\n# Make (usually pre-installed)\nsudo apt-get update &amp;&amp; sudo apt-get install -y make\n\n# Age for secret encryption (optional)\nsudo apt-get install -y age\n\n# SOPS for secret management (optional)\ncurl -LO https://github.com/mozilla/sops/releases/download/v3.8.1/sops-v3.8.1.linux.amd64\nsudo mv sops-v3.8.1.linux.amd64 /usr/local/bin/sops\nsudo chmod +x /usr/local/bin/sops\n</code></pre>","tags":["deployment","prerequisites","requirements","setup"],"boost":3},{"location":"deployment/prerequisites/#network-setup","title":"Network Setup","text":"<p>Ensure the following ports are available:</p> <ul> <li>8080/tcp - Application web interface</li> <li>3306/tcp - MariaDB (development only, if used)</li> <li>5432/tcp - PostgreSQL (development only, alternative database)</li> </ul>","tags":["deployment","prerequisites","requirements","setup"],"boost":3},{"location":"deployment/prerequisites/#verification","title":"Verification","text":"<p>Verify your system meets the requirements:</p> <pre><code># Check Docker version\ndocker --version\ndocker compose version\n\n# Check available memory\nfree -h\n\n# Check available disk space\ndf -h\n\n# Check network connectivity\ncurl -I https://hub.docker.com\n</code></pre>","tags":["deployment","prerequisites","requirements","setup"],"boost":3},{"location":"deployment/procedures/","title":"Deployment Procedures","text":"","tags":["deployment","procedures","quickstart","production"],"boost":4},{"location":"deployment/procedures/#quick-start-deployment","title":"Quick Start Deployment","text":"<p>For development or testing environments:</p> <pre><code># Start all services\nmake start\n\n# Verify services are healthy\ndocker-compose ps\n\n# Follow logs\nmake logs\n\n# Access the application\n# Navigate to http://localhost:8080\n</code></pre>","tags":["deployment","procedures","quickstart","production"],"boost":4},{"location":"deployment/procedures/#production-deployment","title":"Production Deployment","text":"","tags":["deployment","procedures","quickstart","production"],"boost":4},{"location":"deployment/procedures/#1-pre-deployment-verification","title":"1. Pre-deployment Verification","text":"<pre><code># Verify configuration\ndocker-compose config\n\n# Check image availability\ndocker-compose pull --ignore-pull-failures\n\n# Verify external network exists\ndocker network inspect webgrip\n</code></pre>","tags":["deployment","procedures","quickstart","production"],"boost":4},{"location":"deployment/procedures/#2-database-initialization","title":"2. Database Initialization","text":"<pre><code># Start database first\ndocker-compose up -d invoiceninja-application.mariadb\n\n# Wait for database to be ready\nmake wait-ready URL=http://localhost:3306\n\n# Verify database connectivity\ndocker-compose exec invoiceninja-application.mariadb mariadb \\\n  --socket=/var/run/mysqld/mysqld.sock \\\n  --user=invoiceninja --password=invoiceninja \\\n  --execute=\"SELECT 1\"\n</code></pre>","tags":["deployment","procedures","quickstart","production"],"boost":4},{"location":"deployment/procedures/#3-application-deployment","title":"3. Application Deployment","text":"<pre><code># Start all services\nmake start\n\n# Monitor startup\nmake logs SERVICE=invoiceninja-application.application\n\n# Wait for application readiness\nmake wait-ready URL=http://localhost:8080/health\n</code></pre>","tags":["deployment","procedures","quickstart","production"],"boost":4},{"location":"deployment/procedures/#4-initial-configuration","title":"4. Initial Configuration","text":"<pre><code># Create admin user (customize command for Invoice Ninja)\nmake user:create EMAIL=admin@yourcompany.com PASS=initial-password\n\n# Access the application and complete setup wizard\n# Navigate to http://localhost:8080/setup\n</code></pre>","tags":["deployment","procedures","quickstart","production"],"boost":4},{"location":"deployment/procedures/#service-management","title":"Service Management","text":"<pre><code># Start services\nmake start\n\n# Stop services\nmake stop\n\n# View logs (all services)\nmake logs\n\n# View logs (specific service)\nmake logs SERVICE=invoiceninja-application.application\n\n# Execute commands in application container\nmake enter\n# Or with specific command\nmake run CMD=\"php artisan migrate:status\"\n\n# Health check\ncurl -f http://localhost:8080/health\n</code></pre>","tags":["deployment","procedures","quickstart","production"],"boost":4},{"location":"deployment/procedures/#next-steps","title":"Next Steps","text":"<p>After successful deployment: - Proceed to Operations for day-to-day management - See Troubleshooting for common issues - Review Production Considerations for production deployments</p>","tags":["deployment","procedures","quickstart","production"],"boost":4}]}